// jhipster jdl ${this-file} -skip-fake-data
application {
  config {
    applicationType monolith
    authenticationType session
    baseName lobby
    blueprints []
    buildTool gradle
    cacheProvider ehcache
    clientFramework angularX
    clientPackageManager npm
    clientTheme lumen
    creationTimestamp 1660081398790
    databaseType sql
    devDatabaseType mysql
    dtoSuffix DTO
    enableGradleEnterprise false
    enableHibernateCache false
    enableSwaggerCodegen false
    enableTranslation true
    gradleEnterpriseHost ""
    jhiPrefix jhi
    jhipsterVersion "7.9.2"
    languages [en, es]
    messageBroker false
    microfrontend false
    microfrontends []
    nativeLanguage en
    otherModules []
    packageName com.thegraid.lobby
    prodDatabaseType mysql
    reactive false
    rememberMeKey "2f51cb2b5a56a62718e77f9cac4d420799d6a01a8c4cc2fd50f271a9bdaf7c41c8bb9b10f5b5aa0046ee1f28326be9d4cd36"
    searchEngine false
    serverPort 8081
    serviceDiscoveryType no
    skipUserManagement false
    testFrameworks []
    websocket false
    withAdminUi true
  }

  entities AccountInfo, Asset, GameClass, GameInst, GameInstProps, GamePlayer, MemberGameProps, Player
}
/** extension to User (user is the owner of a stable of horses)
 * Account Type indicates the payment properties and the League user is in.
 * maybe this could fold into User.role ?
 */
entity AccountInfo {
  @Version
  version Integer
  type String // or index to a table of AccountType tokens... this table is TBD
  // for ex: some types can create/own Assets
  // some types get paid...
}
/** Assets owned by a member/user; (the horses) a virtual file-system?  */
entity Asset {
  @Version
  version Integer
  /** display name */
  name String maxlength(45)
  /** IPlayer - can be player.main_jar */
  main Boolean
  /** bot is full-auto */
  auto Boolean
  /** url to asset (class or document/resource)
   jar-path ! fqcn.of.asset.class
   jar-path ! path/inside/jar/document
   URL=getenv(“ASSETBASE”)+path/to/release.jar ! user.supplied.Player
  */
  path String
  /** comma-separated list of asset Ids */
  include String
}
/** Which Game engine/jar to play. */
entity GameClass {  // DTO
  @Version
  version Integer
  /** a unique name for this GameClass */
  name String maxlength(45) required
  /** major.minor.patch.TYPE [semver] */
  revision String maxlength(24)
  /** jar-path ! fqcn.of.launcher
  URL=getenv(“GAMEBASE”)+path/to/release.jar ! fqcn.launcher */
  launcherPath String
  /** jar-path ! fqcn.of.game
  URL=getenv(“GAMEBASE”)+path/to/release.jar ! pkg.main */
  gamePath String
  /** doc-path/to/index.html
  URL=getenv(“GAMEBASE”)+path/to/release.jar ! doc/path/index.html */
  docsPath String
  /** a comma-separated string of property names for this GameClass
  only these prop_names can appear in the game_props.json associated with this game_class */
  propNames String
  // timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
  updated Instant required // timestamp CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
}
/** Instance of a Game. */
entity GameInst {  // DTO
  @Version
  version Integer
  gameName String maxlength(64)
  hostUrl String maxlength(64)
  passcode String maxlength(64)
  created Instant required // timestamp CURRENT_TIMESTAMP
  started Instant
  finished Instant
  updated Instant required // timestamp CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
  scoreA Integer
  scoreB Integer
  ticks Integer   // how long the GameInst lasted (# of turns)
}
/** the final negotiated properties for GameInst */
entity GameInstProps {
  @Version
  version Integer
  seed Long
  /** NULL means use normal/standard */
  mapName String maxlength(45)
  /** NULL means not-specified */
  mapSize Integer
  /** NULL means not-specified */
  npcCount Integer
  /** json form of game-specific properties */
  jsonProps String
  updated Instant required // timestamp CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
}
/** one of 2 Players (A or B) in a GameInst */
entity GamePlayer {
  @Version
  version Integer
  /** assigned in Lobby */
  role String maxlength(4) required // 'A' or 'B'
  /** ack'd version; initial -1 */
  ready Integer required
}
/** member/player proposes properties for a new GameInst. */
entity MemberGameProps {
  @Version
  version Integer
  seed Long // set random generator
  /** NULL means use normal/standard */
  mapName String maxlength(45)
  /** NULL means not-specified */
  mapSize Integer
  /** NULL means not-specified */
  npcCount Integer
  /** json form of game-specific properties */
  jsonProps String
  /** MyGameConfig */
  configName String maxlength(45)
}
/** A Member-owned PlayerAI [Asset] with a displayClient [URL]
    a virtual player (the horse in a horse-race)  */
entity Player { // DTO
  @Version
  version Integer
  /** display name, as set by the owning Member. */
  name String maxlength(64)
  /** NULL until ranked */
  rank Integer
  /** initial 0 */
  score Integer
  scoreTime Instant
  rankTime Instant
  /** URL [path fragment?] to download display client from graid server.
  Maybe redo as reference to display_client table entry or an asset entry. */
  displayClient String maxlength(64)
}

relationship OneToOne {
  AccountInfo to @Id User // extension to 'user'
  GameInstProps{gameInst} to @Id GameInst{props}
}
relationship ManyToOne {
  GamePlayer{gameInst} to GameInst
  GamePlayer{player} to Player
  GameInst{playerA} to Player
  GameInst{playerB} to Player
  GameInst{gameClass} to GameClass
  /** what Games this Player can play */
  Player{gameClass} to GameClass
  /** identify the code that implements this PlayerAI: a registered Asset. */
  Player{mainJar} to Asset
  Player{user} to User
  Asset{user} to User
  MemberGameProps{user} to User
  MemberGameProps{gameClass} to GameClass
}

service GameInst, GameInstProps with serviceClass
dto * with mapstruct
